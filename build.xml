<project name="slug" default="runTests">
   <description>slug -- an Internet crawler</description>

   <!-- Allow property overriding -->
   <property file=".ant.properties"/>
   <property file="${user.home}/.ant.properties"/>
   <property file="version.properties"/>

   <!-- Project Directories -->
   <property name="java.dir"     value="src/java"/>
   <property name="bin.dir"      value="bin"/>
   <property name="test.dir"     value="src/tests"/>
   <property name="docs.dir"       value="docs"/>
   <property name="javadoc.dir"      value="${docs.dir}/api"/>
   <property name="lib.dir"      value="lib"/>
   <property name="reports.dir"  value="${docs.dir}/reports"/>
   <property name="dist.dir"   value="dist"/>
   <property name="etc.dir"    value="etc"/>
   <property name="schema.dir" value="${etc.dir}/schema"/>  
   <property name="rules.dir"  value="${etc.dir}/rules"/>
  
   <!-- Java Build Properties -->
   <property name="debug"        value="on"/>
   <property name="optimize"     value="off"/>
   <property name="deprecation"  value="off"/>
   <property name="nowarn"       value="on"/>

   <property name="app.name"     value="slug"/>

   <path id="classpath">
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
   </path>
    
   <path id="util-classpath">
      <path refid="classpath"/>
      <pathelement location="${bin.dir}"/>
   </path>
    
  <target name="clean" description="Clean">
    <delete>
       <fileset dir="${bin.dir}" />
       <fileset dir="${dist.dir}"/>
       <fileset dir="${reports.dir}"/>                  
    </delete>
  </target>

  <target name="init">
    <mkdir dir="${bin.dir}"/>
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>
  
   <target name="build" depends="init"  description="Compile the application">
      <javac srcdir="${java.dir}"
             destdir="${bin.dir}"
             debug="${debug}"
             optimize="${optimize}"
             deprecation="${deprecation}"
             nowarn="${nowarn}">
        <classpath refid="classpath"/>
      </javac>

      <copy todir="${bin.dir}" >
         <fileset dir="${java.dir}" excludes="**/*.java"/>
      </copy>

    <copy todir="${bin.dir}" >
       <fileset dir="${schema.dir}" includes="**/*.rdfs"/>
      </copy>
    
   </target>

   <target name="build.tests" depends="build" description="Compile the tests">
      <javac srcdir="${test.dir}"
             destdir="${bin.dir}"
             debug="${debug}"
             optimize="${optimize}"
             deprecation="${deprecation}"
             nowarn="${nowarn}">
        <classpath refid="classpath"/>
      </javac>
      
      <copy todir="${bin.dir}" >
         <fileset dir="${test.dir}" excludes="**/*.java"/>
      </copy>      
   </target>

   <target name="build.all" depends="build, build.tests" description="Compile app and tests">
   </target>

   <target name="javadoc" description="Generate javadocs">
      <javadoc
           defaultexcludes="yes"
           destdir="${javadoc.dir}"
           author="true"
           version="true"
           use="true"
           windowtitle="${app.name} API">
       <fileset dir="${java.dir}" defaultexcludes="yes">
         <include name="**/*.java" />
       </fileset>           
      </javadoc>
   </target>

   <target name="runTests" depends="build.tests" description="run unit tests">
    <mkdir dir="${reports.dir}"/>
   <junit printsummary="yes" haltonfailure="yes">
     <classpath>
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
       <pathelement location="${bin.dir}"/>
     </classpath>
   
     <formatter type="plain"/>
      <formatter type="brief" usefile="false"/>
      
     <batchtest haltonfailure="no" todir="${reports.dir}">
       <fileset dir="${test.dir}">
         <include name="**/*Test*.java"/>
         <exclude name="**/AllTests.java"/>
       </fileset>
     </batchtest>
   </junit>
   <!--
   <junitreport todir="${reports.dir}">
     <fileset dir="${reports.dir}">
       <include name="TEST-*.xml"/>
     </fileset>
     <report format="frames" todir="${reports.dir}/html"/>  
   </junitreport>
   -->
   </target>


   <target name="jar" depends="build" description="make jar file">
      <jar destfile="${app.name}.jar"
           basedir="${bin.dir}"
           excludes="test/*/**">
      </jar>
   </target>

   <target name="dist" depends="build.all, jar" description="make distributions">
      <mkdir dir="${dist.dir}"/>
      <echo>Making src distribution</echo>
      <zip destfile="${dist.dir}/${app.name}-${version}-src.zip"
           basedir="."
           excludes="${dist.dir}/**">
      </zip>
      <echo>Making nolibs-src distribution</echo>      
      <zip destfile="${dist.dir}/${app.name}-${version}-nolibs-src.zip"
           basedir="."
           excludes="${dist.dir}/**,${lib.dir}/**">
      </zip>
      <echo>Making binary distribution</echo>      
      <zip destfile="${dist.dir}/${app.name}-${version}-bin.zip"
           basedir="."
           excludes="${dist.dir}/**,${reports.dir}/**,src/**">
      </zip>
      <echo>Making nolibs-bin distribution</echo>      
      <zip destfile="${dist.dir}/${app.name}-${version}-nolibs-bin.zip"
           basedir="."
           excludes="${dist.dir}/**,${reports.dir}/**,${lib.dir}/**,src/**">
      </zip>
   </target>
  
  <target name="schemagen" description="generate code for slug.vocabulary package"> 
    <antcall target="generate-schema-class">
      <param name="schema" value="config.rdfs"/>
      <param name="class" value="CONFIG"/>
      <param name="uri" value="http://purl.org/NET/schemas/slug/config/"/>
    </antcall>
  </target>
  
  
  <target name="generate-schema-class" description="invoke jena.schemagen">
    <echo>Generating ${class}.java</echo>
    <tstamp>
      <format property="now" pattern="dd-MM-yyyy hh:mm aa"/>
    </tstamp>   
    <java classname="jena.schemagen" classpathref="classpath" fork="yes">
      <arg value="-i"/>
      <arg value="${schema.dir}/${schema}"/>
      <arg value="--header"/>
      <arg value="%package%
%imports%
/* Code generated by schemagen using Ant at ${now} */       
"/>
      <arg value="-n"/>
      <arg value="${class}"/>
      <arg value="-o"/>
      <arg value="${java.dir}/com/ldodds/slug/vocabulary"/>
      <arg value="-a"/>
      <arg value="${uri}"/>
      <arg value="--package"/>
      <arg value="com.ldodds.slug.vocabulary"/>
      <arg value="--rdfs"/>
    </java>   
  </target>
  
  <target name="generate-location-mapping" description="Generate Location Mapping Config from memory">
    <property name="mapping" value="mapping.n3"/>
    <echo>Generating Location Mapping ${mapping} from source file ${memory}</echo>
    <java classname="com.ldodds.slug.util.GenerateLocationMapping" classpathref="util-classpath" fork="yes">
         <arg value="${memory}"/>
       <arg value="${rules.dir}/memory-to-location-mapping.rl"/>  
       <arg value="${mapping}"/>
    </java>
  </target>
  
</project>
